#!/bin/bash -e

ident() {
  sed 's/^/  /'
}

if ! dotenv contains "HUB_KUBECONFIG"; then
  domain="$(dotenv get "HUB_DOMAIN_NAME")"
  dotenv set "HUB_KUBECONFIG" "$(files abspath ".hub/env/$domain.kubeconfig")"
fi

# shellcheck disable=SC2155
export KUBECONFIG="$(dotenv get "HUB_KUBECONFIG" --default "$KUBECONFIG")"

if ! dotenv contains "GOOGLE_GKE_CLUSTER"; then
  echo "Configuring GKE cluster name"
  echo "* Using GCP zone: $zone"
  zone="$(dotenv get GOOGLE_ZONE)"

  echo "* List of GKE clusters"
  gcloud container clusters list --format="table[box](name,zone,status,createTime)"  --sort-by=~createTime --limit=12 | ident | color g
  suggest="$(gcloud container clusters list --format="value(name)" --sort-by=~createTime --limit=1)"
  ask env "GOOGLE_GKE_CLUSTER" --message 'gke cluster name (for possible values see above)' \
    --suggest "$suggest" --suggest-tag "gcloud" -random -empty
fi

cluster_name="$(dotenv get "GOOGLE_GKE_CLUSTER")"
echo "* Fetching kubeconfig credentials"
zone="$(gcloud container clusters list --filter="name:$cluster_name" --format json | jq -cMr 'first|.zone | select(.)')"
if test -n "$zone"; then
  gcloud container clusters get-credentials "$cluster_name" --zone "$zone" | ident || true
  echo "Taking region and zone from cluster: $zone"
  dotenv set "GOOGLE_ZONE" "$zone"
  dotenv set "GOOGLE_REGION" "$(echo "$zone" | cut -d- -f1-2)"
else
  echo "Error: cluster $cluster_name doesn't have zone"
  echo "We do not support this yet. Please contact our support team"
  exit 1
fi

if ! dotenv contains "KUBERNETES_STORAGE_CLASS"; then
  echo "* Configuring storage class for kubernetes"
  kubectl get sc | ident |  color g
  echo 
  is_defult="storageclass.kubernetes.io/is-default-class"
  sc=$(kubectl get storageclass -o json \
      |     jq -cMr --arg "is_default" "$is_defult" '.items[].metadata | select(.annotations[$is_default]=="true").name | select(.)')

  ask env "KUBERNETES_STORAGE_CLASS" --message 'storage class name (for possible values see above)' --suggest "${sc:-gp2}"
fi

if ! dotenv contains "USER"; then
  echo "* Getting user account from gcloud"
  user="$(gcloud --format=json auth list | jq -cMr --arg u "$USER" '.[] | [select(.status == "ACTIVE"), {account: $u}] | first | .account')"
  if test -n "$user"; then
    ask env "USER" \
      --message 'Kubeflow admin username' \
      --suggest "$user" \
      --suggest-tag "gcloud" \
      --priority "parameter hubstate history suggested default empty"
  else
    ask env "USER" \
      --message 'Kubeflow admin username' \
      --suggest "$(whoami)" \
      --priority "parameter hubstate history suggested default empty"
  fi
fi
